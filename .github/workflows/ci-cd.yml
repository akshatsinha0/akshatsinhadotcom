name: CI Pipeline

# 1. When to run
on:
  push:
    branches: [ main ]
  pull_request:name: "Enterprise CI/CD Pipeline"

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  APP_NAME: akshatsinhadotcom
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 123456789012.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # ---------------------
  # 1. Code Quality & Test
  # ---------------------
  lint_and_test:
    name: Lint & Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm test -- --coverage

      - name: Upload code coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  # ---------------------
  # 2. Security Scanning
  # ---------------------
  code_scan:
    name: CodeQL & SAST Scan
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Snyk Scan
        uses: snyk/actions@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # ---------------------
  # 3. Docker Build & Publish
  # ---------------------
  build_and_push_image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint_and_test, code_scan]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ env.AWS_REGION }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.APP_NAME }}:latest .
          docker tag ${{ env.APP_NAME }}:latest ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Push to ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Set image digest
        run: echo "IMAGE_URI=${{ env.ECR_REPOSITORY }}@$(docker inspect --format='{{.Id}}' ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }})" >> $GITHUB_ENV

  # ---------------------
  # 4. Deploy to Staging
  # ---------------------
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build_and_push_image
    environment:
      name: staging
      url: https://staging.akshatsinhadotcom.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Deploy manifest
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_STAGING }}
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl set image deployment/${{ env.APP_NAME }} ${ { env.APP_NAME } }=$IMAGE_URI -n staging

  # ---------------------
  # 5. Manual Approval
  # ---------------------
  manual_approval:
    name: Await Production Approval
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment:
      name: production
    steps:
      - name: Approval pending
        run: echo "Awaiting manual approval to deploy to production."

  # ---------------------
  # 6. Deploy to Production
  # ---------------------
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: manual_approval
    environment:
      name: production
      url: https://akshatsinhadotcom.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Deploy manifest
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_PROD }}
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl set image deployment/${{ env.APP_NAME }} ${ { env.APP_NAME } }=$IMAGE_URI -n production

  # ---------------------
  # 7. Slack Notification
  # ---------------------
  notify_slack:
    name: "Notify Slack"
    runs-on: ubuntu-latest
    needs: [deploy_staging, deploy_production]
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 2a. Checkout source code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2b. (Placeholder) Install dependencies and build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
